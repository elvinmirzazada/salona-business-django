<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/static/js/ui.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/static/js/ui.js" />
              <option name="originalContent" value="// UI related functionality&#10;const UI = (() =&gt; {&#10;    // Navigate to a specific step in the booking form&#10;    const goToStep = (stepNumber) =&gt; {&#10;        // Update step tabs&#10;        document.querySelectorAll('.booking-step').forEach(step =&gt; {&#10;            step.classList.remove('active');&#10;            if (parseInt(step.dataset.step) === stepNumber) {&#10;                step.classList.add('active');&#10;            }&#10;        });&#10;&#10;        // Show the corresponding step content&#10;        document.querySelectorAll('.booking-step-content').forEach(content =&gt; {&#10;            content.classList.remove('active');&#10;        });&#10;        document.getElementById(`booking-step-${stepNumber}`).classList.add('active');&#10;    };&#10;&#10;    // Show slot action popup for creating bookings or time off&#10;    const showSlotActionPopup = (date, x, y) =&gt; {&#10;        const popup = document.getElementById('slot-action-popup');&#10;        if (!popup) return;&#10;        &#10;        // Set the date and time in the popup title&#10;        const timeElement = document.getElementById('slot-action-time');&#10;        if (timeElement) {&#10;            const formattedDate = date.toLocaleDateString('en-US', { &#10;                weekday: 'short', &#10;                year: 'numeric', &#10;                month: 'short', &#10;                day: 'numeric' &#10;            });&#10;            const formattedTime = Utils.formatTime(date.getHours(), date.getMinutes());&#10;            timeElement.textContent = `${formattedDate} at ${formattedTime}`;&#10;        }&#10;        &#10;        // Store the date in the popup data for later use&#10;        popup.dataset.date = date.toISOString();&#10;        &#10;        // Position popup near the click location&#10;        popup.style.left = `${x}px`;&#10;        popup.style.top = `${y}px`;&#10;        &#10;        // Show the popup&#10;        popup.style.display = 'block';&#10;        &#10;        // Set up event handlers for the buttons&#10;        const addBookingBtn = document.getElementById('add-booking-btn');&#10;        if (addBookingBtn) {&#10;            // Remove existing listener to avoid duplicates&#10;            const newBtn = addBookingBtn.cloneNode(true);&#10;            addBookingBtn.parentNode.replaceChild(newBtn, addBookingBtn);&#10;            &#10;            // Add new listener&#10;            newBtn.addEventListener('click', () =&gt; {&#10;                BookingService.createNewBooking(date);&#10;                popup.style.display = 'none';&#10;            });&#10;        }&#10;        &#10;        const addTimeOffBtn = document.getElementById('add-timeoff-btn');&#10;        if (addTimeOffBtn) {&#10;            // Remove existing listener to avoid duplicates&#10;            const newBtn = addTimeOffBtn.cloneNode(true);&#10;            addTimeOffBtn.parentNode.replaceChild(newBtn, addTimeOffBtn);&#10;            &#10;            // Add new listener&#10;            newBtn.addEventListener('click', () =&gt; {&#10;                BookingService.createTimeOff(date);&#10;                popup.style.display = 'none';&#10;            });&#10;        }&#10;        &#10;        // Close popup when clicking outside&#10;        const closePopupHandler = (e) =&gt; {&#10;            if (!popup.contains(e.target) &amp;&amp; e.target.closest('.slot') === null) {&#10;                popup.style.display = 'none';&#10;                document.removeEventListener('click', closePopupHandler);&#10;            }&#10;        };&#10;        &#10;        // Use setTimeout to prevent immediate closing&#10;        setTimeout(() =&gt; {&#10;            document.addEventListener('click', closePopupHandler);&#10;        }, 10);&#10;    };&#10;&#10;    // Show event popup with details&#10;    const showEventPopup = (event, x, y) =&gt; {&#10;        const popup = document.getElementById('event-popup');&#10;&#10;        // Store the current event data for editing&#10;        popup.dataset.eventId = event.id || '';&#10;        popup.dataset.bookingData = JSON.stringify(event);&#10;&#10;        // Format the date and time display&#10;        const startDate = event.start.toLocaleDateString();&#10;        const endDate = event.end.toLocaleDateString();&#10;        const startTime = Utils.formatTime(event.start.getHours(), event.start.getMinutes());&#10;        const endTime = Utils.formatTime(event.end.getHours(), event.end.getMinutes());&#10;        &#10;        // Create a better formatted date-time display&#10;        let timeDisplay;&#10;        if (startDate === endDate) {&#10;            // Same day event - just show the date once with time range&#10;            timeDisplay = `${startDate}, ${startTime} - ${endTime}`;&#10;        } else {&#10;            // Multi-day event - show full range&#10;            timeDisplay = `From ${startDate} ${startTime} to ${endDate} ${endTime}`;&#10;        }&#10;        &#10;        // Set popup content&#10;        document.querySelector('#event-popup-time-value').textContent = timeDisplay;&#10;&#10;        // Set status with appropriate styling&#10;        const statusElement = document.querySelector('#event-popup-status-value');&#10;        statusElement.textContent = event.status.charAt(0).toUpperCase() + event.status.slice(1);&#10;        statusElement.className = `status-${event.status}`;&#10;&#10;        // Set price&#10;        document.querySelector('#event-popup-price-value').textContent =&#10;            event.totalPrice ? `$${event.totalPrice}` : 'Not specified';&#10;&#10;        // Set customer information&#10;        if (event.customer) {&#10;            // Set customer name&#10;            document.querySelector('#event-popup-customer-name').textContent =&#10;                `${event.customer.first_name || ''} ${event.customer.last_name || ''}`.trim() || 'Unknown';&#10;&#10;            // Set customer email&#10;            document.querySelector('#event-popup-customer-email').textContent =&#10;                event.customer.email || 'No email provided';&#10;&#10;            // Set customer phone&#10;            document.querySelector('#event-popup-customer-phone').textContent =&#10;                event.customer.phone || 'No phone provided';&#10;        } else {&#10;            // If no customer info is available&#10;            document.querySelector('#event-popup-customer-name').textContent = 'No customer information';&#10;            document.querySelector('#event-popup-customer-email').textContent = '';&#10;            document.querySelector('#event-popup-customer-phone').textContent = '';&#10;        }&#10;&#10;        // Set notes&#10;        document.querySelector('#event-popup-notes-value').textContent =&#10;            event.description || 'No notes';&#10;&#10;        // Position popup near the click but ensure it stays in viewport&#10;        const viewportWidth = window.innerWidth;&#10;        const viewportHeight = window.innerHeight;&#10;        const popupWidth = 300; // Match the CSS width&#10;&#10;        // Calculate position to keep popup within viewport&#10;        let left = x + 10;&#10;        let top = y + 10;&#10;&#10;        // Adjust if popup would go off right edge&#10;        if (left + popupWidth &gt; viewportWidth) {&#10;            left = Math.max(10, x - popupWidth - 10);&#10;        }&#10;&#10;        // Adjust if popup would go off bottom edge&#10;        const popupHeight = popup.offsetHeight || 200; // Estimate if not yet shown&#10;        if (top + popupHeight &gt; viewportHeight) {&#10;            top = Math.max(10, viewportHeight - popupHeight - 10);&#10;        }&#10;&#10;        // Set popup position&#10;        popup.style.left = `${left}px`;&#10;        popup.style.top = `${top}px`;&#10;&#10;        // Show popup&#10;        popup.style.display = 'block';&#10;&#10;        // Add click handler to edit button&#10;        const editButton = document.getElementById('event-popup-edit');&#10;        if (editButton) {&#10;            // Remove any existing event listeners to avoid duplicates&#10;            const newEditButton = editButton.cloneNode(true);&#10;            editButton.parentNode.replaceChild(newEditButton, editButton);&#10;&#10;            newEditButton.addEventListener('click', () =&gt; {&#10;                BookingService.handleEditBooking(event.id);&#10;                popup.style.display = 'none'; // Hide popup after clicking edit&#10;            });&#10;        }&#10;&#10;        // Add click handler to delete button&#10;        const deleteButton = document.getElementById('event-popup-delete');&#10;        if (deleteButton) {&#10;            // Remove any existing event listeners to avoid duplicates&#10;            const newDeleteButton = deleteButton.cloneNode(true);&#10;            deleteButton.parentNode.replaceChild(newDeleteButton, deleteButton);&#10;&#10;            newDeleteButton.addEventListener('click', () =&gt; {&#10;                // Show the custom confirmation popup instead of the browser confirm&#10;                showConfirmationPopup(&#10;                    `Are you sure you want to delete this booking for ${event.customer?.first_name || 'unknown'} ${event.customer?.last_name || 'customer'}?`,&#10;                    () =&gt; {&#10;                        // Confirmed action - delete the booking&#10;                        BookingService.deleteBooking(event.id);&#10;                        popup.style.display = 'none'; // Hide popup after clicking delete&#10;                    }&#10;                );&#10;            });&#10;        }&#10;&#10;        // Add click handler to close button&#10;        const closeButton = popup.querySelector('.event-popup-close');&#10;        const closePopup = () =&gt; {&#10;            popup.style.display = 'none';&#10;            closeButton.removeEventListener('click', closePopup);&#10;            document.removeEventListener('click', documentClickHandler);&#10;&#10;            // Remove event handlers to prevent memory leaks&#10;            if (editButton) {&#10;                editButton.replaceWith(editButton.cloneNode(true));&#10;            }&#10;            if (deleteButton) {&#10;                deleteButton.replaceWith(deleteButton.cloneNode(true));&#10;            }&#10;        };&#10;&#10;        closeButton.addEventListener('click', closePopup);&#10;&#10;        // Close when clicking outside the popup&#10;        const documentClickHandler = (e) =&gt; {&#10;            if (!popup.contains(e.target) &amp;&amp; e.target.closest('.event') === null) {&#10;                closePopup();&#10;            }&#10;        };&#10;&#10;        // Use setTimeout to prevent the immediate closing of popup&#10;        setTimeout(() =&gt; {&#10;            document.addEventListener('click', documentClickHandler);&#10;        }, 10);&#10;    };&#10;&#10;    // Show custom confirmation popup&#10;    const showConfirmationPopup = (message, confirmCallback) =&gt; {&#10;        const popup = document.getElementById('confirmation-popup');&#10;        const messageElement = document.getElementById('confirmation-message');&#10;&#10;        // Set the message&#10;        messageElement.textContent = message;&#10;&#10;        // Show the popup with flex display to center content&#10;        popup.style.display = 'flex';&#10;        document.body.classList.add('modal-open');&#10;&#10;        // Set up the confirm button&#10;        const confirmBtn = document.getElementById('confirmation-confirm-btn');&#10;        const newConfirmBtn = confirmBtn.cloneNode(true);&#10;        confirmBtn.parentNode.replaceChild(newConfirmBtn, confirmBtn);&#10;&#10;        newConfirmBtn.addEventListener('click', () =&gt; {&#10;            // Execute the callback and close the popup&#10;            confirmCallback();&#10;            closeConfirmationPopup();&#10;        });&#10;&#10;        // Set up the cancel button&#10;        const cancelBtn = document.getElementById('confirmation-cancel-btn');&#10;        const newCancelBtn = cancelBtn.cloneNode(true);&#10;        cancelBtn.parentNode.replaceChild(newCancelBtn, cancelBtn);&#10;&#10;        newCancelBtn.addEventListener('click', closeConfirmationPopup);&#10;&#10;        // Set up the close button&#10;        const closeBtn = popup.querySelector('.confirmation-popup-close');&#10;        const newCloseBtn = closeBtn.cloneNode(true);&#10;        closeBtn.parentNode.replaceChild(newCloseBtn, closeBtn);&#10;&#10;        newCloseBtn.addEventListener('click', closeConfirmationPopup);&#10;&#10;        // Close popup function&#10;        function closeConfirmationPopup() {&#10;            popup.style.display = 'none';&#10;            document.body.classList.remove('modal-open');&#10;        }&#10;&#10;        // Close when clicking outside the popup content&#10;        popup.addEventListener('click', (e) =&gt; {&#10;            if (e.target === popup) {&#10;                closeConfirmationPopup();&#10;            }&#10;        });&#10;&#10;        // Close on escape key&#10;        document.addEventListener('keydown', escapeHandler);&#10;&#10;        function escapeHandler(e) {&#10;            if (e.key === 'Escape') {&#10;                closeConfirmationPopup();&#10;                document.removeEventListener('keydown', escapeHandler);&#10;            }&#10;        }&#10;    };&#10;&#10;    // Setup close button for the booking form panel&#10;    const setupPanelCloseButton = () =&gt; {&#10;        const closeBtn = document.querySelector('.booking-form-panel .close-panel-btn');&#10;        const formPanel = document.getElementById('booking-form-panel');&#10;&#10;        if (closeBtn &amp;&amp; formPanel) {&#10;            closeBtn.addEventListener('click', () =&gt; {&#10;                formPanel.classList.remove('active');&#10;                // Reset form to create mode for next time&#10;                formPanel.dataset.mode = 'create';&#10;                formPanel.querySelector('.booking-form-header h3').textContent = 'Add New Booking';&#10;                document.getElementById('booking-submit-btn').textContent = 'Create Booking';&#10;            });&#10;        }&#10;    };&#10;&#10;    // Set up form step navigation&#10;    const setupBookingFormNavigation = () =&gt; {&#10;        // Step tabs click event&#10;        document.querySelectorAll('.booking-step').forEach(tab =&gt; {&#10;            tab.addEventListener('click', function() {&#10;                const step = parseInt(this.dataset.step);&#10;                goToStep(step);&#10;            });&#10;        });&#10;&#10;        // Next step buttons&#10;        document.querySelectorAll('.next-step-btn').forEach(btn =&gt; {&#10;            btn.addEventListener('click', function() {&#10;                const currentStep = parseInt(this.closest('.booking-step-content').dataset.step);&#10;                goToStep(currentStep + 1);&#10;            });&#10;        });&#10;&#10;        // Back step buttons&#10;        document.querySelectorAll('.prev-step-btn').forEach(btn =&gt; {&#10;            btn.addEventListener('click', function() {&#10;                const currentStep = parseInt(this.closest('.booking-step-content').dataset.step);&#10;                goToStep(currentStep - 1);&#10;            });&#10;        });&#10;&#10;        // Set up the close button&#10;        setupPanelCloseButton();&#10;&#10;        // Add event listeners for the step navigation buttons&#10;        const step1Next = document.getElementById('step-1-next');&#10;        if (step1Next) {&#10;            step1Next.addEventListener('click', () =&gt; goToStep(2));&#10;        }&#10;&#10;        const step2Back = document.getElementById('step-2-back');&#10;        if (step2Back) {&#10;            step2Back.addEventListener('click', () =&gt; goToStep(1));&#10;        }&#10;    };&#10;&#10;    return {&#10;        goToStep,&#10;        showSlotActionPopup,&#10;        showEventPopup,&#10;        showConfirmationPopup,&#10;        setupBookingFormNavigation,&#10;        setupPanelCloseButton&#10;    };&#10;})();&#10;&#10;// Export the UI module&#10;window.UI = UI;&#10;" />
              <option name="updatedContent" value="// UI related functionality&#10;const UI = (() =&gt; {&#10;    // Navigate to a specific step in the booking form&#10;    const goToStep = (stepNumber) =&gt; {&#10;        // Update step tabs&#10;        document.querySelectorAll('.booking-step').forEach(step =&gt; {&#10;            step.classList.remove('active');&#10;            if (parseInt(step.dataset.step) === stepNumber) {&#10;                step.classList.add('active');&#10;            }&#10;        });&#10;&#10;        // Show the corresponding step content&#10;        document.querySelectorAll('.booking-step-content').forEach(content =&gt; {&#10;            content.classList.remove('active');&#10;        });&#10;        document.getElementById(`booking-step-${stepNumber}`).classList.add('active');&#10;    };&#10;&#10;    // Show slot action popup for creating bookings or time off&#10;    const showSlotActionPopup = (date, x, y) =&gt; {&#10;        const popup = document.getElementById('slot-action-popup');&#10;        if (!popup) return;&#10;        &#10;        // Set the date and time in the popup title&#10;        const timeElement = document.getElementById('slot-action-time');&#10;        if (timeElement) {&#10;            const formattedDate = date.toLocaleDateString('en-US', { &#10;                weekday: 'short', &#10;                year: 'numeric', &#10;                month: 'short', &#10;                day: 'numeric' &#10;            });&#10;            const formattedTime = Utils.formatTime(date.getHours(), date.getMinutes());&#10;            timeElement.textContent = `${formattedDate} at ${formattedTime}`;&#10;        }&#10;        &#10;        // Store the date in the popup data for later use&#10;        popup.dataset.date = date.toISOString();&#10;        &#10;        // Position popup near the click location&#10;        popup.style.left = `${x}px`;&#10;        popup.style.top = `${y}px`;&#10;        &#10;        // Show the popup&#10;        popup.style.display = 'block';&#10;        &#10;        // Set up event handlers for the buttons&#10;        const addBookingBtn = document.getElementById('add-booking-btn');&#10;        if (addBookingBtn) {&#10;            // Remove existing listener to avoid duplicates&#10;            const newBtn = addBookingBtn.cloneNode(true);&#10;            addBookingBtn.parentNode.replaceChild(newBtn, addBookingBtn);&#10;            &#10;            // Add new listener&#10;            newBtn.addEventListener('click', () =&gt; {&#10;                BookingService.createNewBooking(date);&#10;                popup.style.display = 'none';&#10;            });&#10;        }&#10;        &#10;        const addTimeOffBtn = document.getElementById('add-timeoff-btn');&#10;        if (addTimeOffBtn) {&#10;            // Remove existing listener to avoid duplicates&#10;            const newBtn = addTimeOffBtn.cloneNode(true);&#10;            addTimeOffBtn.parentNode.replaceChild(newBtn, addTimeOffBtn);&#10;            &#10;            // Add new listener&#10;            newBtn.addEventListener('click', () =&gt; {&#10;                BookingService.createTimeOff(date);&#10;                popup.style.display = 'none';&#10;            });&#10;        }&#10;        &#10;        // Close popup when clicking outside&#10;        const closePopupHandler = (e) =&gt; {&#10;            if (!popup.contains(e.target) &amp;&amp; e.target.closest('.slot') === null) {&#10;                popup.style.display = 'none';&#10;                document.removeEventListener('click', closePopupHandler);&#10;            }&#10;        };&#10;        &#10;        // Use setTimeout to prevent immediate closing&#10;        setTimeout(() =&gt; {&#10;            document.addEventListener('click', closePopupHandler);&#10;        }, 10);&#10;    };&#10;&#10;    // Show event popup with details&#10;    const showEventPopup = (event, x, y) =&gt; {&#10;        const popup = document.getElementById('event-popup');&#10;&#10;        // Store the current event data for editing&#10;        popup.dataset.eventId = event.id || '';&#10;        popup.dataset.bookingData = JSON.stringify(event);&#10;&#10;        // Format the date and time display&#10;        const startDate = event.start.toLocaleDateString();&#10;        const endDate = event.end.toLocaleDateString();&#10;        const startTime = Utils.formatTime(event.start.getHours(), event.start.getMinutes());&#10;        const endTime = Utils.formatTime(event.end.getHours(), event.end.getMinutes());&#10;        &#10;        // Create a better formatted date-time display&#10;        let timeDisplay;&#10;        if (startDate === endDate) {&#10;            // Same day event - just show the date once with time range&#10;            timeDisplay = `${startDate}, ${startTime} - ${endTime}`;&#10;        } else {&#10;            // Multi-day event - show full range&#10;            timeDisplay = `From ${startDate} ${startTime} to ${endDate} ${endTime}`;&#10;        }&#10;        &#10;        // Set popup content&#10;        document.querySelector('#event-popup-time-value').textContent = timeDisplay;&#10;&#10;        // Set status with appropriate styling&#10;        const statusElement = document.querySelector('#event-popup-status-value');&#10;        statusElement.textContent = event.status.charAt(0).toUpperCase() + event.status.slice(1);&#10;        statusElement.className = `status-${event.status}`;&#10;&#10;        // Set price&#10;        document.querySelector('#event-popup-price-value').textContent =&#10;            event.totalPrice ? `$${event.totalPrice}` : 'Not specified';&#10;&#10;        // Set customer information&#10;        if (event.customer) {&#10;            // Set customer name&#10;            document.querySelector('#event-popup-customer-name').textContent =&#10;                `${event.customer.first_name || ''} ${event.customer.last_name || ''}`.trim() || 'Unknown';&#10;&#10;            // Set customer email&#10;            document.querySelector('#event-popup-customer-email').textContent =&#10;                event.customer.email || 'No email provided';&#10;&#10;            // Set customer phone&#10;            document.querySelector('#event-popup-customer-phone').textContent =&#10;                event.customer.phone || 'No phone provided';&#10;        } else {&#10;            // If no customer info is available&#10;            document.querySelector('#event-popup-customer-name').textContent = 'No customer information';&#10;            document.querySelector('#event-popup-customer-email').textContent = '';&#10;            document.querySelector('#event-popup-customer-phone').textContent = '';&#10;        }&#10;&#10;        // Set notes&#10;        document.querySelector('#event-popup-notes-value').textContent =&#10;            event.description || 'No notes';&#10;&#10;        // Position popup near the click but ensure it stays in viewport&#10;        const viewportWidth = window.innerWidth;&#10;        const viewportHeight = window.innerHeight;&#10;        const popupWidth = 300; // Match the CSS width&#10;&#10;        // Calculate position to keep popup within viewport&#10;        let left = x + 10;&#10;        let top = y + 10;&#10;&#10;        // Adjust if popup would go off right edge&#10;        if (left + popupWidth &gt; viewportWidth) {&#10;            left = Math.max(10, x - popupWidth - 10);&#10;        }&#10;&#10;        // Adjust if popup would go off bottom edge&#10;        const popupHeight = popup.offsetHeight || 200; // Estimate if not yet shown&#10;        if (top + popupHeight &gt; viewportHeight) {&#10;            top = Math.max(10, viewportHeight - popupHeight - 10);&#10;        }&#10;&#10;        // Set popup position&#10;        popup.style.left = `${left}px`;&#10;        popup.style.top = `${top}px`;&#10;&#10;        // Show popup&#10;        popup.style.display = 'block';&#10;&#10;        // Add click handler to edit button&#10;        const editButton = document.getElementById('event-popup-edit');&#10;        if (editButton) {&#10;            // Remove any existing event listeners to avoid duplicates&#10;            const newEditButton = editButton.cloneNode(true);&#10;            editButton.parentNode.replaceChild(newEditButton, editButton);&#10;&#10;            newEditButton.addEventListener('click', () =&gt; {&#10;                BookingService.handleEditBooking(event.id);&#10;                popup.style.display = 'none'; // Hide popup after clicking edit&#10;            });&#10;        }&#10;&#10;        // Add click handler to delete button&#10;        const deleteButton = document.getElementById('event-popup-delete');&#10;        if (deleteButton) {&#10;            // Remove any existing event listeners to avoid duplicates&#10;            const newDeleteButton = deleteButton.cloneNode(true);&#10;            deleteButton.parentNode.replaceChild(newDeleteButton, deleteButton);&#10;&#10;            newDeleteButton.addEventListener('click', () =&gt; {&#10;                // Show the custom confirmation popup instead of the browser confirm&#10;                showConfirmationPopup(&#10;                    `Are you sure you want to delete this booking for ${event.customer?.first_name || 'unknown'} ${event.customer?.last_name || 'customer'}?`,&#10;                    () =&gt; {&#10;                        // Confirmed action - delete the booking&#10;                        BookingService.deleteBooking(event.id);&#10;                        popup.style.display = 'none'; // Hide popup after clicking delete&#10;                    }&#10;                );&#10;            });&#10;        }&#10;&#10;        // Add click handler to close button&#10;        const closeButton = popup.querySelector('.event-popup-close');&#10;        const closePopup = () =&gt; {&#10;            popup.style.display = 'none';&#10;            closeButton.removeEventListener('click', closePopup);&#10;            document.removeEventListener('click', documentClickHandler);&#10;&#10;            // Remove event handlers to prevent memory leaks&#10;            if (editButton) {&#10;                editButton.replaceWith(editButton.cloneNode(true));&#10;            }&#10;            if (deleteButton) {&#10;                deleteButton.replaceWith(deleteButton.cloneNode(true));&#10;            }&#10;        };&#10;&#10;        closeButton.addEventListener('click', closePopup);&#10;&#10;        // Close when clicking outside the popup&#10;        const documentClickHandler = (e) =&gt; {&#10;            if (!popup.contains(e.target) &amp;&amp; e.target.closest('.event') === null) {&#10;                closePopup();&#10;            }&#10;        };&#10;&#10;        // Use setTimeout to prevent the immediate closing of popup&#10;        setTimeout(() =&gt; {&#10;            document.addEventListener('click', documentClickHandler);&#10;        }, 10);&#10;    };&#10;&#10;    // Show custom confirmation popup&#10;    const showConfirmationPopup = (message, confirmCallback) =&gt; {&#10;        const popup = document.getElementById('confirmation-popup');&#10;        const messageElement = document.getElementById('confirmation-message');&#10;&#10;        // Set the message&#10;        messageElement.textContent = message;&#10;&#10;        // Show the popup with flex display to center content&#10;        popup.style.display = 'flex';&#10;        document.body.classList.add('modal-open');&#10;&#10;        // Set up the confirm button&#10;        const confirmBtn = document.getElementById('confirmation-confirm-btn');&#10;        const newConfirmBtn = confirmBtn.cloneNode(true);&#10;        confirmBtn.parentNode.replaceChild(newConfirmBtn, confirmBtn);&#10;&#10;        newConfirmBtn.addEventListener('click', () =&gt; {&#10;            // Execute the callback and close the popup&#10;            confirmCallback();&#10;            closeConfirmationPopup();&#10;        });&#10;&#10;        // Set up the cancel button&#10;        const cancelBtn = document.getElementById('confirmation-cancel-btn');&#10;        const newCancelBtn = cancelBtn.cloneNode(true);&#10;        cancelBtn.parentNode.replaceChild(newCancelBtn, cancelBtn);&#10;&#10;        newCancelBtn.addEventListener('click', closeConfirmationPopup);&#10;&#10;        // Set up the close button&#10;        const closeBtn = popup.querySelector('.confirmation-popup-close');&#10;        const newCloseBtn = closeBtn.cloneNode(true);&#10;        closeBtn.parentNode.replaceChild(newCloseBtn, closeBtn);&#10;&#10;        newCloseBtn.addEventListener('click', closeConfirmationPopup);&#10;&#10;        // Close popup function&#10;        function closeConfirmationPopup() {&#10;            popup.style.display = 'none';&#10;            document.body.classList.remove('modal-open');&#10;        }&#10;&#10;        // Close when clicking outside the popup content&#10;        popup.addEventListener('click', (e) =&gt; {&#10;            if (e.target === popup) {&#10;                closeConfirmationPopup();&#10;            }&#10;        });&#10;&#10;        // Close on escape key&#10;        document.addEventListener('keydown', escapeHandler);&#10;&#10;        function escapeHandler(e) {&#10;            if (e.key === 'Escape') {&#10;                closeConfirmationPopup();&#10;                document.removeEventListener('keydown', escapeHandler);&#10;            }&#10;        }&#10;    };&#10;&#10;    // Setup close button for the booking form panel&#10;    const setupPanelCloseButton = () =&gt; {&#10;        const closeBtn = document.querySelector('.booking-form-panel .close-panel-btn');&#10;        const formPanel = document.getElementById('booking-form-panel');&#10;&#10;        if (closeBtn &amp;&amp; formPanel) {&#10;            closeBtn.addEventListener('click', () =&gt; {&#10;                formPanel.classList.remove('active');&#10;                // Reset form to create mode for next time&#10;                formPanel.dataset.mode = 'create';&#10;                formPanel.querySelector('.booking-form-header h3').textContent = 'Add New Booking';&#10;                document.getElementById('booking-submit-btn').textContent = 'Create Booking';&#10;            });&#10;        }&#10;    };&#10;&#10;    // Set up form step navigation&#10;    const setupBookingFormNavigation = () =&gt; {&#10;        // Step tabs click event&#10;        document.querySelectorAll('.booking-step').forEach(tab =&gt; {&#10;            tab.addEventListener('click', function() {&#10;                const step = parseInt(this.dataset.step);&#10;                goToStep(step);&#10;            });&#10;        });&#10;&#10;        // Next step buttons&#10;        document.querySelectorAll('.next-step-btn').forEach(btn =&gt; {&#10;            btn.addEventListener('click', function() {&#10;                const currentStep = parseInt(this.closest('.booking-step-content').dataset.step);&#10;                goToStep(currentStep + 1);&#10;            });&#10;        });&#10;&#10;        // Back step buttons&#10;        document.querySelectorAll('.prev-step-btn').forEach(btn =&gt; {&#10;            btn.addEventListener('click', function() {&#10;                const currentStep = parseInt(this.closest('.booking-step-content').dataset.step);&#10;                goToStep(currentStep - 1);&#10;            });&#10;        });&#10;&#10;        // Set up the close button&#10;        setupPanelCloseButton();&#10;&#10;        // Add event listeners for the step navigation buttons&#10;        const step1Next = document.getElementById('step-1-next');&#10;        if (step1Next) {&#10;            step1Next.addEventListener('click', () =&gt; goToStep(2));&#10;        }&#10;&#10;        const step2Back = document.getElementById('step-2-back');&#10;        if (step2Back) {&#10;            step2Back.addEventListener('click', () =&gt; goToStep(1));&#10;        }&#10;    };&#10;&#10;    return {&#10;        goToStep,&#10;        showSlotActionPopup,&#10;        showEventPopup,&#10;        showConfirmationPopup,&#10;        setupBookingFormNavigation,&#10;        setupPanelCloseButton&#10;    };&#10;})();&#10;&#10;// Export the UI module&#10;window.UI = UI;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>